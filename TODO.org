* General
** Most likely for the integration of proofs and code something like http://blog.objectteams.org/2010/02/ide-for-your-own-language-embedded-in-java-part-1/ is worth trying (to extend JDT at the points where there is no API/extension point for that)
*** alternatively, maybe the jdt weaving (http://wiki.eclipse.org/JDT_weaving_features) scala-ide uses is worth looking into?
** remove the introduced global state - DocumentState - plus everything that depends on that
** keep it simple, only one connection to a Coq binary
** future: incrementally run proofer in the background, annoy user then with unproven stuff (when code is changed)
** test cases/coverage - at least for parsers
** incremental combinator parsers, done in yi http://yi-editor.blogspot.com/2008/11/incremental-parsing-in-yi.html
** read scala style guide
** use mkString instead of reduceLeft at several places!
** use for instead of insane while i < foo.length!
** remove occurences of "null". these are evil!
** care more about initialization order!:
   specifically: goalviewer might be null
   also, activeeditor might be null
    ~> should both not be the case if we're opening with a coq window

  also, track more precisely all internal state and be able to destroy
   it (too much depends on activeeditor == null in DocumentMonitor and EclipseStuff)
* Coq side
** Annotation/Folding:
Lemma foo : .
Proof
  foo bar baz
Qed.
should have the +/- on the "Lemma" line and fold only the Proof..,
displaying the Qed solely
  support for that could be achieved http://www.eclipse.org/articles/Article-Folding-in-Eclipse-Text-Editors/folding.html
** CoqOutputter: find disjoint definition names (newR, newM,...)
** Use Set Cwd instead of Add LoadPath for project diretory
** Undo from just after End should jump to start of Section/Module/whatever
** remove hack that searches for '. ' to send command
** retract proof/leave for later
*** especially Admitted/Abort/Abort All/Suspend/Resume
** Restore State/Write State support
*** to fight performance issues - being able to load current state again
*** might also help for background proofing
** interrupt on windows (custom c code which sends ctrl-c)
*** also, coqtop is coqtop.exe on windows!
*** http://msdn.microsoft.com/en-us/library/ms811896
*** http://msdn.microsoft.com/en-us/library/ms683155(v=vs.85).aspx
** Reset ident <- undefines everything back to ident
** proof completion
*** start with SearchAbout and similar helpers
** dependency graph of coq files, run coqc as background task
** Progress as part of progress window, not custom dialog (without using Job API?)
*** real steps while GotoCursor/GotoEnd
*** add lemma name to progress (especially interesting for Qed.)
*** join strings (otherwise displays one line only, might be (* COMMENT *))
** [Jesper] Using ctrl-Enter to parse lots of code works nicely, but would it be faster if it didn't print the output for all steps? If not then disregard this.
** syntax highlighting in GoalViewer
* Java side
** highlight verified/proven method in green or however
** add/remove whitespaces at end of class/file messes the coq synced output up (DeDefinition and emma instead of Definition and Lemma)
** Report Warnings/Errors instead of Console.println during parsing and simplification
** update on save rather than edit (and only if it typechecks/compiles ok)
** ignore Coq class in java output (at least partially)
** SimpleJava optimizations
observations from SnapshotTrees.java:
pushLeftPath: node = node.left (where node is an argument (must be allocated on stack anyhow?)) ~~> JAssignment(node, JFieldAccess(node, left)) ~~> tmp because node is used on RHS
      Node tmp_2 = node.left;
      node = tmp_2;
COUNTEREXAMPLE: x := x.foo + x.foo or x := foo(foo(x))
  ~~> reusing x hurts here
next: should be no tmp_5!
      Integer result
      [..]
      int tmp_5 = tmp_4.item
      result = tmp_5
next: cse:
      Node tmp_6 = nodestate.node;
      Node tmp_7 = tmp_6.rght;
      if (tmp_7 != null)
        Node tmp_8 = nodestate.node;
        Node tmp_9 = tmp_8.rght
        pushLeftPath(tmp_9)
same in contains: [item stack variable, integer argument ; node a local variable of type Node]
 if (node.item < item) ... else if (item < node.item)
 generates
   tmp_2 = FieldAccess(node, item)
   if (tmp_2 < item) ...
   else
     tmp_4 = FieldAccess(node, item)
     if (item < tmp_4)
~~> first conservative expansion into bad code, then later optimization of this!
 (means: remove variable tmp, conditionals from JBinding, JAssignment, JConditional)
method init_, new Node(i, l, r) vs new Node(i) <- also new should be followed by call to init
also, inner classes should be kept inner (how to do that in Coq?)

int tmp_1 = node.item
Node foo = node
..
foo.item = 200
..
if (node.item > 20)

** name newly introduced variables not tmp_xx, but find a logical name for them (as done in LOOP/Umbra/...)
** types for ternary Bool ? x : y <- intersect x y
** proper syntax (not only a string) for pre/postcondition and loop invariants - plus completion!
** for loops -> translate to while
** error on multiple returns and overloading of the same method name
*** at least warnings for eclipse and support for refactoring/fixing these
** constructors (multiple, what to do in there?)
** copy fields + methods bodies from superclasses (once we have a strategy for class-to-class inheritance)
** there's an alternative way to get the source of an editor:
  final IEditorInput editorInput = window.getActivePage().getActiveEditor().getEditorInput();
  final IFile selectedFile = (IFile) editorInput.getAdapter(IFile.class);
* Java features
** Generics
** Exceptions
** array types
** dynamic casts

* bugs
** green markup sometimes disappears when typing on next line
** File -> Open .. select .v crashes
** shutting down
dk.itu.sdg.kopitiam.ErrorOutputActor$@1683e80: caught org.eclipse.swt.SWTException: Failed to execute runnable (org.eclipse.swt.SWTException: Widget is disposed)
org.eclipse.swt.SWTException: Failed to execute runnable (org.eclipse.swt.SWTException: Widget is disposed)
	at org.eclipse.swt.SWT.error(SWT.java:4083)
	at org.eclipse.swt.SWT.error(SWT.java:3998)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:195)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:150)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4240)
	at dk.itu.sdg.kopitiam.GoalViewer.clear(EclipseStuff.scala:420)
	at dk.itu.sdg.kopitiam.CoqOutputDispatcher$.dispatch(Actions.scala:415)
	at dk.itu.sdg.kopitiam.PrintActor$$anonfun$distribute$1.apply(CoqTop.scala:49)
	at dk.itu.sdg.kopitiam.PrintActor$$anonfun$distribute$1.apply(CoqTop.scala:49)
	at scala.collection.LinearSeqOptimized$class.foreach(LinearSeqOptimized.scala:59)
	at scala.collection.immutable.List.foreach(List.scala:45)
	at dk.itu.sdg.kopitiam.PrintActor$.distribute(CoqTop.scala:49)
	at dk.itu.sdg.kopitiam.CoqState$.setShell(CoqTop.scala:115)
	at dk.itu.sdg.kopitiam.ErrorOutputActor$$anonfun$act$2.apply(CoqTop.scala:134)
	at dk.itu.sdg.kopitiam.ErrorOutputActor$$anonfun$act$2.apply(CoqTop.scala:128)
	at scala.actors.Actor$class.receive(Actor.scala:547)
	at dk.itu.sdg.kopitiam.ErrorOutputActor$.receive(CoqTop.scala:125)
	at dk.itu.sdg.kopitiam.ErrorOutputActor$.act(CoqTop.scala:128)
	at scala.actors.Reactor$$anonfun$dostart$1.apply(Reactor.scala:222)
	at scala.actors.Reactor$$anonfun$dostart$1.apply(Reactor.scala:222)
	at scala.actors.ReactorTask.run(ReactorTask.scala:33)
	at scala.concurrent.forkjoin.ForkJoinPool$AdaptedRunnable.exec(ForkJoinPool.java:611)
	at scala.concurrent.forkjoin.ForkJoinTask.quietlyExec(ForkJoinTask.java:422)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.mainLoop(ForkJoinWorkerThread.java:340)
	at scala.concurrent.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:325)
Caused by: org.eclipse.swt.SWTException: Widget is disposed
	at org.eclipse.swt.SWT.error(SWT.java:4083)
	at org.eclipse.swt.SWT.error(SWT.java:3998)
	at org.eclipse.swt.SWT.error(SWT.java:3969)
	at org.eclipse.swt.widgets.Widget.error(Widget.java:715)
	at org.eclipse.swt.widgets.Widget.checkWidget(Widget.java:531)
	at org.eclipse.swt.widgets.Text.setText(Text.java:1871)
	at dk.itu.sdg.kopitiam.GoalViewer$$anon$8.run(EclipseStuff.scala:423)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:134)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3593)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3286)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.block(ModalContext.java:173)
	at org.eclipse.jface.operation.ModalContext.run(ModalContext.java:388)
	at org.eclipse.jface.dialogs.ProgressMonitorDialog.run(ProgressMonitorDialog.java:507)
	at org.eclipse.ui.internal.progress.ProgressMonitorJobsDialog.run(ProgressMonitorJobsDialog.java:275)
	at org.eclipse.ui.internal.ide.application.IDEWorkbenchAdvisor.disconnectFromWorkspace(IDEWorkbenchAdvisor.java:509)
	at org.eclipse.ui.internal.ide.application.IDEWorkbenchAdvisor.postShutdown(IDEWorkbenchAdvisor.java:342)
	at org.eclipse.ui.internal.Workbench.shutdown(Workbench.java:2967)
	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:1115)
	at org.eclipse.ui.internal.Workbench.access$15(Workbench.java:1032)
	at org.eclipse.ui.internal.Workbench$25.run(Workbench.java:1276)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1274)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1246)
	at org.eclipse.ui.internal.Workbench$61.handleEvent(Workbench.java:2508)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:3783)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:3776)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:4724)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:4589)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:4666)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:115)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3281)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:620)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:575)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1408)
