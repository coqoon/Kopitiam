* VSTTE
** translate java to simplejava code
** mainly test and update java examples
** softening spec requirements: only needed specs, others replace with true
** test!
** test more!
** test eclipse 4!
** prove method in one java buffer, then prove method in another -> only until after backtrack (sometimes)
** comment parsing
** multiple . in antiquotes
** coq buffer 1 -> switch to 2 -> no annotations are removed in 1
** compilation is brittle - esp the automatic one
 -> due to stateful Add LoadPath which isn't backtrack by BackTrack...
   -> need to use Remove LoadPath as inverse operation!
** don't backtrack everything - leave the require import in there (DocumentMonitor)
** verify verified method!
** enable/disable actions in java editor
** put model into proof certificate!
** keybindings in goal viewer etc

* General
** notes from SVARM:
 interface/java standard library annotations
 defer to runtime checking!?
** useful notes:
      val bun = Platform.getBundle("dk.itu.sdg.kopitiam")
      val loc = FileLocator.getBundleFile(bun).getParentFile.getParentFile.toString
** move global loadpath into project-specific settings (similar to referenced libraries in eclipse)!
** future: incrementally run proofer in the background, annoy user then with unproven stuff (when code is changed)
** incremental combinator parsers, done in yi http://yi-editor.blogspot.com/2008/11/incremental-parsing-in-yi.html
** remove occurences of "null". these are evil!
** useful: http://robertvarttinen.blogspot.com/2007/01/adding-third-party-jar-to-your-eclipse.html
* Coq side
** comment parsing
 shouldn't be too hard - currently done in CoqTop:
   filterComments takes a string and removes all comments
   computeCommentOffset takes a string and an offset and returns the length of preceeding comment
 problem here is: nested comments and also multiple comments before an interesting command

 I've the slight feeling that parsing comments doesn't work reliable in those two situations

 Additionally there are the commentparsers in CoqEditor - OutlineParser - which do the folding stuff, and are borken

 There is also findNextCommand and findPreviousCommand in CoqTop

  maybe it is easier to treat each comment as a step?
** if focus on goalviewer, still enable step fwd/backward keyboard shortcuts
** closing comment *) without beginning -> out of heap space
** lots of proof obligations -> find some useful interface for the tabs
** focus on a subgoal -> emit grey text "Focus n.", which is activated if the user writes proof script : question is: does subgoal stay active!?
** dependency graph of coq files, run coqc as background task
** coq projects which depend upon each other
** lazily run coqc when required (SfLib - just run coqc on Import SfLib)
** syntax highlighting in GoalViewer
** indicate when Qed
** run coqtop from project dir, rather than "Add LoadPath" <- implies one coqtop for each project!
** Jump to definition -- jface.text.hyperlink
** completion for arguments "apply foo with (x := y + 1)" <- x is argument name of lemma
** cleanup outline - and add icons
** disable refresh action if not inside of proof (CoqState.proofMode)
** folding broken due to comments
** Notation: "Print Grammar constr." <- useful!?!? also: "Set Printing Notations."

** content assisstant filtering "foo.bar" lemmas out:
 CoqUnknown(List.existsb_exists:
  forall (A : Type) (f : A -> Datatypes.bool) (l : Datatypes.list A),
  List.existsb f l = Datatypes.true <->
  (exists x : A, List.In x l /\ f x = Datatypes.true))
CoqResponse should parse more carefully here - maybe

** Undo from just after End should jump to start of Section/Module/whatever
** remove hack that searches for '. ' to send command
** retract proof/leave for later
*** especially Admitted/Abort/Abort All/Suspend/Resume
** Restore State/Write State support
*** to fight performance issues - being able to load current state again
*** might also help for background proofing
** interrupt on windows (custom c code which sends ctrl-c)
*** maybe Ctrl+Br ("" + 3)?
*** http://msdn.microsoft.com/en-us/library/ms811896
*** http://msdn.microsoft.com/en-us/library/ms683155(v=vs.85).aspx
*** http://stackoverflow.com/questions/1835885/send-ctrl-c-to-process-open-by-java
** Reset ident <- undefines everything back to ident
* Java side
** more lazy about backtrack, especially when typing <% and %>
** default specs for methods - only require those needed to be specified (don't need add to prove length)
** call unmarkProofs somewhere!
** remove provenmarkers when method is updated
** warn if an antiquote contains multiple statements! (or support multiple coq statements in a single antiquote)
** report if Java is not SimpleJava
** Re-Implement translation of Java to SimpleJava
- introduction of temporary variables on nested field access
 foo.bar.baz --> Object tmp1 = foo.bar ; Object tmp2 = tmp1.baz
- Move statements out of test (conditional/while):
 if (foo.bar == 42) --> int tmp1 = foo.bar; if (tmp1 == 42)
 while (foo.bar > 42) --> int tmp1 = foo.bar; while (tmp1 > 42) { ... ; tmp1 = foo.bar }
- Move statements out of arguments (of method calls)
 methodcall(foo.bar) --> Object tmp1 = foo.bar; methodcall(tmp1)
- Nested classes <- that sort of works somehow...
- prefix/postfix statements (which might be on stack or fields!)
- ternary conditional operator
- multiple variable declarations at once? - multiple fields are supported!
- move field initializers to constructor
(there might be more - https://github.com/hannesm/Kopitiam/tree/before-using-Eclipse-AST/src/test/resources/javaparser/source)
** Keybindings for Coq actions
** Step All / Step Until
** reveal when stepping
** proper enabling and disabling of actions (esp during prove method)
** field initializers - during constructor - translate that - and/or infer specification
** constructors (currently calloc instead of call to constructor)
** verify verified method <- what happens?
** use mouse position instead of cursor position for right-click "prove this method"
** javaNewerThanSource unused!
** stepping over if <- emit forward; but here offset computations are bad!
** SimpleJava optimizations
observations from SnapshotTrees.java:
pushLeftPath: node = node.left (where node is an argument (must be allocated on stack anyhow?)) ~~> JAssignment(node, JFieldAccess(node, left)) ~~> tmp because node is used on RHS
      Node tmp_2 = node.left;
      node = tmp_2;
COUNTEREXAMPLE: x := x.foo + x.foo or x := foo(foo(x))
  ~~> reusing x hurts here
next: should be no tmp_5!
      Integer result
      [..]
      int tmp_5 = tmp_4.item
      result = tmp_5
next: cse:
      Node tmp_6 = nodestate.node;
      Node tmp_7 = tmp_6.rght;
      if (tmp_7 != null)
        Node tmp_8 = nodestate.node;
        Node tmp_9 = tmp_8.rght
        pushLeftPath(tmp_9)
same in contains: [item stack variable, integer argument ; node a local variable of type Node]
 if (node.item < item) ... else if (item < node.item)
 generates
   tmp_2 = FieldAccess(node, item)
   if (tmp_2 < item) ...
   else
     tmp_4 = FieldAccess(node, item)
     if (item < tmp_4)
~~> first conservative expansion into bad code, then later optimization of this!
 (means: remove variable tmp, conditionals from JBinding, JAssignment, JConditional)
method init_, new Node(i, l, r) vs new Node(i) <- also new should be followed by call to init
also, inner classes should be kept inner (how to do that in Coq?)

int tmp_1 = node.item
Node foo = node
..
foo.item = 200
..
if (node.item > 20)

** name newly introduced variables not tmp_xx, but find a logical name for them (as done in LOOP/Umbra/...)
** types for ternary Bool ? x : y <- intersect x y
** for loops -> translate to while
** warn when overloading of the same method name
** also warn on varargs construct
** constructors (multiple, what to do in there?)
** there's an alternative way to get the source of an editor:
  final IEditorInput editorInput = window.getActivePage().getActiveEditor().getEditorInput();
  final IFile selectedFile = (IFile) editorInput.getAdapter(IFile.class);
* Java features
** Generics
** Exceptions
** array types
** dynamic casts

