* General
** move global loadpath into project-specific settings (similar to referenced libraries in eclipse)!
** future: incrementally run proofer in the background, annoy user then with unproven stuff (when code is changed)
** incremental combinator parsers, done in yi http://yi-editor.blogspot.com/2008/11/incremental-parsing-in-yi.html
** read scala style guide
** use mkString instead of reduceLeft at several places!
** use for instead of insane while i < foo.length!
** remove occurences of "null". these are evil!
** care more about initialization order!:
   specifically: goalviewer might be null
   also, activeeditor might be null
    ~> should both not be the case if we're opening with a coq window

  also, track more precisely all internal state and be able to destroy
   it (too much depends on activeeditor == null in DocumentMonitor and EclipseStuff)
** useful: http://robertvarttinen.blogspot.com/2007/01/adding-third-party-jar-to-your-eclipse.html
* Coq side
** CoqOutputter: find disjoint definition names (newR, newM,...)
** Use Set Cwd instead of Add LoadPath for project diretory
** Undo from just after End should jump to start of Section/Module/whatever
** remove hack that searches for '. ' to send command
** retract proof/leave for later
*** especially Admitted/Abort/Abort All/Suspend/Resume
** Restore State/Write State support
*** to fight performance issues - being able to load current state again
*** might also help for background proofing
** interrupt on windows (custom c code which sends ctrl-c)
*** maybe Ctrl+Br ("" + 3)?
*** http://msdn.microsoft.com/en-us/library/ms811896
*** http://msdn.microsoft.com/en-us/library/ms683155(v=vs.85).aspx
*** http://stackoverflow.com/questions/1835885/send-ctrl-c-to-process-open-by-java
** Reset ident <- undefines everything back to ident
** dependency graph of coq files, run coqc as background task
** syntax highlighting in GoalViewer
* Java side
** highlight verified/proven method in green or however
** Report Warnings/Errors instead of Console.println during parsing and simplification
** update on save rather than edit (and only if it typechecks/compiles ok)
** SimpleJava optimizations
observations from SnapshotTrees.java:
pushLeftPath: node = node.left (where node is an argument (must be allocated on stack anyhow?)) ~~> JAssignment(node, JFieldAccess(node, left)) ~~> tmp because node is used on RHS
      Node tmp_2 = node.left;
      node = tmp_2;
COUNTEREXAMPLE: x := x.foo + x.foo or x := foo(foo(x))
  ~~> reusing x hurts here
next: should be no tmp_5!
      Integer result
      [..]
      int tmp_5 = tmp_4.item
      result = tmp_5
next: cse:
      Node tmp_6 = nodestate.node;
      Node tmp_7 = tmp_6.rght;
      if (tmp_7 != null)
        Node tmp_8 = nodestate.node;
        Node tmp_9 = tmp_8.rght
        pushLeftPath(tmp_9)
same in contains: [item stack variable, integer argument ; node a local variable of type Node]
 if (node.item < item) ... else if (item < node.item)
 generates
   tmp_2 = FieldAccess(node, item)
   if (tmp_2 < item) ...
   else
     tmp_4 = FieldAccess(node, item)
     if (item < tmp_4)
~~> first conservative expansion into bad code, then later optimization of this!
 (means: remove variable tmp, conditionals from JBinding, JAssignment, JConditional)
method init_, new Node(i, l, r) vs new Node(i) <- also new should be followed by call to init
also, inner classes should be kept inner (how to do that in Coq?)

int tmp_1 = node.item
Node foo = node
..
foo.item = 200
..
if (node.item > 20)

** name newly introduced variables not tmp_xx, but find a logical name for them (as done in LOOP/Umbra/...)
** types for ternary Bool ? x : y <- intersect x y
** for loops -> translate to while
** error on multiple returns and overloading of the same method name
*** at least warnings for eclipse and support for refactoring/fixing these
** constructors (multiple, what to do in there?)
** there's an alternative way to get the source of an editor:
  final IEditorInput editorInput = window.getActivePage().getActiveEditor().getEditorInput();
  final IFile selectedFile = (IFile) editorInput.getAdapter(IFile.class);
* Java features
** Generics
** Exceptions
** array types
** dynamic casts

