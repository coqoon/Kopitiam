#+TITLE: Kopitiam
#+OPTIONS:  H:1 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:nil skip:nil d:nil tags:not-in-toc email:nil author:nil creator:nil

   #+begin_html
<style>
  h2 { text-align: center }
  div#postamble { display: none }
  div.content img { display: block; margin: 0px auto; max-width: 85%; }
  div.content { width:37em; margin: 0px auto; text-align: justify; }
  div.content > ul { padding-left: 1em; }
</style>
   #+end_html
   #+begin_html
   <div class="content">
   #+end_html
  Kopitiam is an Eclipse plugin for certifying full functional
  correctness of Java programs using a higher-order separation
  logic. Kopitiam extends the Java IDE with an interactive environment
  for program verification, powered by the general-purpose proof
  assistant Coq. Moreover, Kopitiam includes a feature-complete
  development environment for Coq theories, where users can define
  program models, and prove theorems required for the program
  verification.

[[file:screen.jpg][file:screen-small.jpg]]

Coq perspective (click to enlarge): on the left bottom the outline, in
the middle the Coq editor and problems view, on the right the goal
viewer. The Coq editor indicates with a green background the commands
processed by Coq, the red squiggly line indicates an error ('Tactic expected')
and the tooltip shows all possible completions
with the prefix 'Zabs'.

[[file:screen2.jpg][file:screen2-small.jpg]]

The Java perspective (clieck to enlarge): Java code interleaved with
specifications and proof script using antiquotes. Similar to the Coq
perspective, the green background indicates commands processed by
Coq. The blue background indicates a verified method. On the right
the goal viewer shows the current proof state.
   #+begin_html
   </div>
   #+end_html


* Installation Instructions
 #+begin_html
   <div class="content">
 #+end_html

** [[http://coq.inria.fr][Coq]] - use Coq-8.4
** Charge! [[file:charge-8.4-20130304.tar.gz][tar.gz]] [[file:charge-8.4-20130304.zip][zip]] - Java semantics, higher-order separation logic and tactics in Coq
*** MacOSX and Linux: Unpack the tarball and use 'make' to compile
*** Windows: Unpack the zipfile and use the included build.bat (from windows command line processor)

c:\charge> set PATH=C:\Program Files\Coq\bin;%PATH%

c:\charge> build.bat

...coq output...
** [[http://eclipse.org][Eclipse]] - currently Indigo (3.7) ([[http://www.eclipse.org/downloads/packages/release/indigo/sr2][direct link]]) is mainly supported
** Start Eclipse
** Click on the "Help -> Install New Software" menu item
** Enter "http://www.itu.dk/research/tomeso/kopitiam/eclipse" as update site
** Select Kopitiam and follow the dialogs
** Restart Eclipse
** Go to Preferences -> Kopitiam and configure the path to coqtop and the loadpath to your downloaded Charge!
   #+begin_html
   </div>
   #+end_html


* Getting Started (Coq Environment)
 #+begin_html
 <div class="content">
 #+end_html

The Goal Viewer, which displays the current context and proof obligations, is activated via "Window -> Show View -> Other -> Coq Views -> Goal Viewer".

You will need to specify in the Preferences -> Kopitiam the path to coqtop (usually /usr/local/bin) in order to get the interactive Coq mode running.

Kopitiam adds some icons into the menubar:

[[file:menu-bar.png]]

These are enabled when a Coq editor is active (or a Java editor). The actions are (from left to right):

** Undo - which steps a single command back
** Retract - which retracts the whole file
** Step forward - which steps a single command forward
** Step until - which steps until the cursor position
** Step All - which steps until the end of the file
** Refresh - which refreshes the Goal Viewer
** Restart - which terminates Coq and spawns a new Coq process
** Interrupt - which interrupts Coq (useful if it does not terminate or takes a long time)

Additionally, ".v" files are opened by default in the Coq editor provided by Kopitiam. You can always click with the right mouse button on any file, use the "Open With" menu item and select Coq Editor from the list to open that file in a Coq Editor.

Open or create a new Coq file (there is a wizard to create a new Coq file), and type some proof script. You should then be able to interact with Coq by pressing the "Step forward" button.

Some Coq output is also put onto the Console, which you might want to activate via "Window -> Show View -> Console".

   #+begin_html
   </div>
   #+end_html

* Getting Started (Java Environment)
 #+begin_html
 <div class="content">
 #+end_html

The Java editor is extended with a "Verify Method" context menu action - which uses the current cursor position to choose which method to verify.
When "Verify Method" is selected, first the Coq model file is processed by Coq (indicated by that being activated), afterwards the Java program is translated to Coq definitions, and the specifications of the methods are translated into Coq definitions. These definitions are processed by Coq, currently without indication.

Once Coq has processed all definitions, the specification of the currently focused method is higlighted with a green background. In the goal viewer the current proof obligation is shown, you can step forwards and backwards over the antiquotations.

When all methods of a program are verified, Kopitiam generates a proof certificate.
 #+begin_html
 </div>
 #+end_html

* Eclipse Example Projects
 #+begin_html
 <div class="content">
 #+end_html

These example projects also include the proof certificate file (ListJava.v/FactorialJava.v), which is generated by Kopitiam and can be checked automatically using Coq and Charge!.

** Linked List [[file:lists-20130303.tar.gz][tar.gz]] [[file:lists-20130303.zip][zip]] implementation with add, in-place list reversal and a recursively implemented length method
** Factorial [[file:factorial-20130303.tar.gz][tar.gz]] [[file:factorial-20130303.zip][zip]] implementation using a static method which calls itself recursively

   #+begin_html
   </div>
   #+end_html
* Development
   #+begin_html
   <div class="content">
   #+end_html

The source code of Kopitiam is available on github: [[https://github.com/hannesm/Kopitiam][here]]

Report bugs, feedback, suggestions to "hame" at this domain

   #+begin_html
   </div>
   #+end_html

