#+TITLE: Kopitiam
#+OPTIONS:  H:1 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:nil skip:nil d:nil tags:not-in-toc email:nil author:nil creator:nil

   #+begin_html
<style>
  h2 { text-align: center }
  div#postamble { display: none }
  div.content img { display: block; margin: 0px auto; max-width: 85%; }
  div.content { width:37em; margin: 0px auto; text-align: justify; }
  div.content > ul { padding-left: 1em; }
</style>
   #+end_html
   #+begin_html
   <div class="content">
   #+end_html
  Kopitiam is an Eclipse plugin for certifying full functional
  correctness of Java programs using a higher-order separation
  logic. Kopitiam extends the Java IDE with an interactive environment
  for program verification, powered by the general-purpose proof
  assistant Coq. Moreover, Kopitiam includes a feature-complete
  development environment for Coq theories, where users can define
  program models, and prove theorems required for the program
  verification.

[[file:screen.jpg][file:screen-small.jpg]]

Coq perspective (click to enlarge): on the left bottom the outline, in
the middle the Coq editor and problems view, on the right the goal
viewer. The Coq editor indicates with a green background the commands
processed by Coq, the red squiggly line indicates an error (no command
'eapply xist' exists) and the tooltip shows all possible completions
with the prefix 'xist'.

[[file:screen2.jpg][file:screen2-small.jpg]]

The Java perspective (clieck to enlarge): Java code interleaved with
specifications and proof script using antiquotes. Similar to the Coq
perspective, the green background indicates commands processed by
Coq. On the right the goal viewer shows the current proof state.
   #+begin_html
   </div>
   #+end_html


* Installation Instructions
 #+begin_html
   <div class="content">
 #+end_html

** [[http://coq.inria.fr][Coq]] - currently Coq-8.3 ([[http://coq.inria.fr/coq-8.3][direct link]]) is required
** [[file:charge-coq8.3-20121017.tar.gz][Charge!]] - Java semantics, higher-order separation logic and tactics in Coq
*** Unpack the tarball and use 'make' to compile
** [[http://eclipse.org][Eclipse]] - currently a 32bit version of Indigo (3.7) ([[http://www.eclipse.org/downloads/packages/release/indigo/sr2][direct link]]) is required
** Start Eclipse
** Click on the "Help -> Install New Software" menu item
** Enter "http://itu.dk/people/hame/kopitiam/" as update site
** Select Kopitiam and follow the dialogs
** Restart Eclipse
** Go to Preferences -> Kopitiam and configure the path to coqtop and the loadpath to your downloaded Charge!
   #+begin_html
   </div>
   #+end_html


* Eclipse Example Projects
 #+begin_html
 <div class="content">
 #+end_html

These example projects also include the proof certificate file (ListJava.v/FactorialJava.v), which is generated by Kopitiam and can be checked automatically using Coq and Charge!.

** [[file:lists-20121019.tar.gz][Linked List]] implementation with add, in-place list reversal and a recursively implemented length method
** [[file:factorial-20121019.tar.gz][Factorial]] implementation using a static method which calls itself recursively

   #+begin_html
   </div>
   #+end_html
* Development
   #+begin_html
   <div class="content">
   #+end_html

The source code of Kopitiam is available on github: [[https://github.com/hannesm/Kopitiam][here]]

Report bugs, feedback, suggestions to "hame" at this domain

   #+begin_html
   </div>
   #+end_html

